---
import { useTranslations, type Language } from "../../utils/i18n";

interface Props {
  lang: Language;
}

const { lang } = Astro.props;
const t = useTranslations(lang);

const skillCategories = [
  {
    title: lang === "en" ? "ML & Data Science" : "ML и Data Science",
    icon: "ml",
    skills: [
      { name: "PyTorch", level: 95 },
      { name: "Scikit-learn", level: 90 },
      { name: "NumPy", level: 95 },
      { name: "Pandas", level: 90 },
      { name: "JAX", level: 75 },
    ],
  },
  {
    title: lang === "en" ? "Programming Languages" : "Языки программирования",
    icon: "code",
    skills: [
      { name: "Python", level: 95 },
      { name: "TypeScript", level: 85 },
      { name: "C/C++", level: 75 },
      { name: "Rust", level: 65 },
      { name: "Java", level: 70 },
      { name: "Haskell", level: 60 },
    ],
  },
  {
    title: lang === "en" ? "Web & Databases" : "Веб и базы данных",
    icon: "web",
    skills: [
      { name: "FastAPI", level: 90 },
      { name: "Next.js", level: 85 },
      { name: "Astro", level: 80 },
      { name: "PostgreSQL", level: 80 },
      { name: "MongoDB", level: 85 },
    ],
  },
  {
    title: lang === "en" ? "Tools & Platforms" : "Инструменты и платформы",
    icon: "tools",
    skills: [
      { name: "Docker", level: 90 },
      { name: "Git", level: 95 },
      { name: "LaTeX", level: 85 },
      { name: "Apache Kafka", level: 70 },
    ],
  },
];

const researchAreas =
  lang === "en"
    ? [
        "Deep Reinforcement Learning (DQN, A2C, REINFORCE)",
        "Mathematical Optimization",
        "Natural Language Processing",
        "Computer Vision",
        "ML Pipeline Development",
        "Model Deployment & MLOps",
      ]
    : [
        "Глубокое обучение с подкреплением (DQN, A2C, REINFORCE)",
        "Математическая оптимизация",
        "Обработка естественного языка",
        "Компьютерное зрение",
        "Разработка ML-пайплайнов",
        "Развертывание моделей и MLOps",
      ];
---

<section id="skills" class="py-20">
  <div class="container-custom">
    <h2 class="section-title text-center animate-on-scroll">
      {t("section.skills")}
    </h2>

    <!-- Skills Grid -->
    <div class="grid md:grid-cols-2 gap-8 mb-16">
      {
        skillCategories.map((category, catIndex) => (
          <div
            class={`card animate-on-scroll`}
            style={`animation-delay: ${catIndex * 100}ms`}
          >
            <div class="flex items-center gap-3 mb-6">
              <div class="w-10 h-10 rounded-lg bg-primary-100 dark:bg-primary-900/30 flex items-center justify-center">
                {category.icon === "ml" && (
                  <svg
                    class="w-6 h-6 text-primary-600 dark:text-primary-400"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z"
                    />
                  </svg>
                )}
                {category.icon === "code" && (
                  <svg
                    class="w-6 h-6 text-primary-600 dark:text-primary-400"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"
                    />
                  </svg>
                )}
                {category.icon === "web" && (
                  <svg
                    class="w-6 h-6 text-primary-600 dark:text-primary-400"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"
                    />
                  </svg>
                )}
                {category.icon === "tools" && (
                  <svg
                    class="w-6 h-6 text-primary-600 dark:text-primary-400"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
                    />
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                    />
                  </svg>
                )}
              </div>
              <h3 class="text-xl font-semibold text-light-text dark:text-dark-text">
                {category.title}
              </h3>
            </div>

            <div class="space-y-4">
              {category.skills.map((skill) => (
                <div>
                  <div class="flex justify-between mb-2">
                    <span class="text-sm font-medium text-light-text dark:text-dark-text">
                      {skill.name}
                    </span>
                    <span class="text-sm text-light-text-muted dark:text-dark-text-muted">
                      {skill.level}%
                    </span>
                  </div>
                  <div class="h-2 bg-light-elevated dark:bg-dark-elevated rounded-full overflow-hidden">
                    <div
                      class="h-full bg-gradient-to-r from-primary-600 to-accent-600 rounded-full transition-all duration-1000"
                      style={`width: ${skill.level}%`}
                    />
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))
      }
    </div>

    <!-- Research Areas -->
    <div class="max-w-4xl mx-auto animate-on-scroll">
      <h3
        class="text-2xl font-bold text-light-text dark:text-dark-text mb-6 text-center"
      >
        {
          lang === "en"
            ? "Research & Specialization Areas"
            : "Исследования и специализация"
        }
      </h3>
      <div class="flex flex-wrap justify-center gap-3">
        {researchAreas.map((area) => <span class="badge text-sm">{area}</span>)}
      </div>
    </div>
  </div>
</section>
