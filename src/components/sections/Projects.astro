---
// src/components/sections/Projects.astro
import { getCollection } from "astro:content";
import { useTranslations, type Language } from "../../utils/i18n";
import { Icon } from "astro-icon/components";
import PDFButton from "../ui/PDFButton.astro";
import Link from "../ui/Link.astro";
import { localizedUrl } from "@/utils/url";

interface File {
  title: string;
  path: string;
}

interface Link {
  href: string;
  icon: string;
  label?: string;
}

interface Props {
  lang: Language;
}

const { lang } = Astro.props;
const t = useTranslations(lang);

// Get all project entries for this language
const projects = (await getCollection("projects"))
  .filter((entry: any) => entry.id.split(".")[0].endsWith(`-${lang}`))
  .map((entry: any) => entry.data)
  .sort((a: any, b: any) => a.order - b.order);

const sectionLabel =
  "text-xs font-bold uppercase tracking-wider text-light-text dark:text-dark-text mb-3 flex items-center gap-2";
---

<section id="projects" class="py-20">
  <div class="container-custom">
    <h2 class="section-title text-center animate-on-scroll">
      {t("section.projects")}
    </h2>

    <!-- Masonry Grid Layout -->
    <div class="columns-1 md:columns-2 2xl:columns-3 gap-8 space-y-8">
      {
        projects.map((project: any, index: number) => (
          <div
            class="break-inside-avoid animate-on-scroll"
            style={`animation-delay: ${index * 100}ms`}
          >
            <div class="card card-hover mb-8">
              {/* Featured Badge */}
              {project.featured && (
                <div class="inline-flex items-center gap-2 px-3 py-1.5 rounded-full bg-accent-100 dark:bg-accent-900/30 text-accent-700 dark:text-accent-300 text-xs font-semibold border border-accent-200 dark:border-accent-800 mb-4">
                  <Icon class="w-4 h-4" name="mdi:star" />
                  {t("projects.featured")}
                </div>
              )}

              {/* Header Section */}
              <div class="pb-4 border-b border-light-border dark:border-dark-border">
                <div class="flex items-start justify-between gap-3 mb-3">
                  <h3 class="text-2xl font-bold text-light-text dark:text-dark-text">
                    {project.title}
                  </h3>
                  <span class="text-sm font-semibold text-light-text-muted dark:text-dark-text-muted bg-light-border/30 dark:bg-dark-border/30 px-3 py-1.5 rounded-full whitespace-nowrap">
                    {project.period}
                  </span>
                </div>
                <p class="text-primary-600 dark:text-primary-400 font-semibold text-lg mb-1">
                  {project.role}
                </p>
                {project.company && (
                  <p class="text-sm text-light-text-muted dark:text-dark-text-muted font-medium">
                    {project.company}
                  </p>
                )}
              </div>

              {/* Description */}
              <p class="text-base text-light-text-muted dark:text-dark-text-muted leading-relaxed mt-4">
                {project.description}
              </p>

              {/* Achievements */}
              {project.achievements && project.achievements.length > 0 && (
                <div class="mt-6 p-4 bg-primary-50 dark:bg-primary-900/10 rounded-lg border border-primary-200 dark:border-primary-800">
                  <h4 class={sectionLabel}>
                    <span class="w-1 h-4 bg-primary-500 rounded-full" />
                    {t("projects.achievements")}
                  </h4>
                  <ul class="space-y-2 text-sm text-primary-700 dark:text-primary-300">
                    {project.achievements.map((achievement: string) => (
                      <li class="flex items-start gap-3">
                        <span class="text-primary-500 mt-1">▸</span>
                        <span class="flex-1">{achievement}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {/* Key Features / responsibilities */}
              {project.responsibilities &&
                project.responsibilities.length > 0 && (
                  <div class="mt-6">
                    <h4 class={sectionLabel}>
                      <span class="w-1 h-4 bg-accent-500 rounded-full" />
                      {t("common.responsibilities")}
                    </h4>
                    <ul class="space-y-2 text-sm text-light-text-muted dark:text-dark-text-muted">
                      {project.responsibilities.map((highlight: string) => (
                        <li class="flex items-start gap-3">
                          <span class="text-accent-500 mt-1">▸</span>
                          <span class="flex-1">{highlight}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

              {/* Tech Stack */}
              <div class="mt-6">
                <h4 class={sectionLabel}>
                  <span class="w-1 h-4 bg-primary-500 rounded-full" />
                  {t("common.stack")}
                </h4>
                <div class="flex flex-wrap gap-2">
                  {project.stack.map((tech: string) => (
                    <span class="badge text-xs">{tech}</span>
                  ))}
                </div>
              </div>

              {/* Resources - Using consistent Link and PDFButton components */}
              {((project.githubs && project.githubs.length > 0) ||
                (project.demos && project.demos.length > 0) ||
                (project.files && project.files.length > 0)) && (
                <div class="mt-6 pt-4 border-t border-light-border dark:border-dark-border">
                  <h4 class={sectionLabel}>
                    <span class="w-1 h-4 bg-accent-500 rounded-full" />
                    {t("common.resources")}
                  </h4>

                  <div class="flex flex-wrap items-center gap-3">
                    {/* PDF Files */}
                    {project.files &&
                      project.files.length > 0 &&
                      project.files.map((file: File) => (
                        <PDFButton
                          filename={file.path}
                          label={file.title}
                          colorScheme="primary"
                          variant="outline"
                          size="sm"
                        />
                      ))}

                    {/* Demo links */}
                    {project.demos &&
                      project.demos.length > 0 &&
                      project.demos.map((demo: Link) => (
                        <Link
                          href={demo.href}
                          icon={demo.icon || "mdi:link-variant"}
                          label={demo.label}
                          colorScheme="primary"
                          variant="outline"
                          size="sm"
                          ariaLabel={demo.label || t("common.demo")}
                        />
                      ))}

                    {/* GitHub repositories */}
                    {project.githubs &&
                      project.githubs.length > 0 &&
                      project.githubs.map((github: Link) => (
                        <Link
                          href={github.href}
                          icon="mdi:github"
                          label={github.label}
                          colorScheme="primary"
                          variant="outline"
                          size="sm"
                          ariaLabel={github.label || t("common.sourceCode")}
                        />
                      ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>
