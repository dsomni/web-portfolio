---
import { getCollection } from "astro:content";
import { useTranslations, type Language } from "../../utils/i18n";
import ProjectCard from "../ui/ProjectCard.astro";

interface Props {
  lang: Language;
}

const { lang } = Astro.props;
const t = useTranslations(lang);

const projects = (await getCollection("projects"))
  .filter((entry: any) => entry.id.split(".")[0].endsWith(`-${lang}`))
  .map((entry: any) => entry.data)
  .sort((a: any, b: any) => a.order - b.order);

const distributeIntoColumns = (items: any[], numColumns: number) =>
  Array.from({ length: numColumns }, (_, colIndex) =>
    items.filter((_, index) => index % numColumns === colIndex)
  );

const [column1Md, column2Md] = distributeIntoColumns(projects, 2);
const [column1, column2, column3] = distributeIntoColumns(projects, 3);
---

<section id="projects" class="py-20">
  <div class="container-custom">
    <h2 class="section-title text-center animate-on-scroll">
      {t("section.projects")}
    </h2>

    <!-- Mobile: Single Column (below md) -->
    <div class="grid grid-cols-1 gap-8 lg:hidden">
      {
        projects.map((project: any, index: number) => (
          <ProjectCard
            project={project}
            animationDelay={index * 100}
            lang={lang}
          />
        ))
      }
    </div>

    <!-- Desktop: 2 Columns (md to lg) -->
    <div class="hidden lg:grid lg:grid-cols-2 3xl:hidden gap-8">
      {
        [column1Md, column2Md].map((column, colIndex) => (
          <div class="grid gap-10 content-start">
            {column.map((project, index) => (
              <ProjectCard
                project={project}
                animationDelay={(index * 2 + colIndex) * 100}
                lang={lang}
              />
            ))}
          </div>
        ))
      }
    </div>

    <!-- Large Desktop: 3 Columns (lg and above) with reduced padding -->
    <!-- <div class="hidden 3xl:grid 3xl:grid-cols-3 gap-6 px-4">
      {
        [column1, column2, column3].map((column, colIndex) => (
          <div class="grid gap-10 content-start">
            {column.map((project, index) => (
              <ProjectCard
                project={project}
                animationDelay={(index * 3 + colIndex) * 100}
                lang={lang}
              />
            ))}
          </div>
        ))
      }
    </div> -->
  </div>
</section>
