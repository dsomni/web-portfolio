---
import { getRelativeLocaleUrl } from "astro:i18n";
import { languages, type Language } from "../../utils/i18n";
import { Icon } from "astro-icon/components";

const currentLang = (Astro.currentLocale || "en") as Language;
const altLang: Language = currentLang === "en" ? "ru" : "en";

// Get pathname and remove any .html extension
let pathname = Astro.url.pathname.replace(/\.html$/, "");

// Remove base path if present
const basePath = import.meta.env.BASE_URL;
if (basePath && basePath !== "/" && pathname.startsWith(basePath)) {
  pathname = pathname.substring(basePath.length);
  if (!pathname.startsWith("/")) {
    pathname = "/" + pathname;
  }
}

// Remove locale prefix
if (pathname.startsWith("/ru/")) {
  pathname = pathname.substring(3);
} else if (pathname === "/ru") {
  pathname = "/";
}

// Ensure pathname starts with /
if (!pathname.startsWith("/")) {
  pathname = "/" + pathname;
}

// Generate alternate URL
let altUrl = getRelativeLocaleUrl(altLang, pathname);

// Remove trailing slash if not root
if (altUrl.endsWith("/") && altUrl.length > 1) {
  altUrl = altUrl.slice(0, -1);
}
---

<a
  href={altUrl}
  id="language-switcher"
  class="relative p-2 rounded-lg text-light-text dark:text-dark-text hover:bg-primary-100 dark:hover:bg-primary-900/30 transition-all duration-300 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-primary-500 flex items-center gap-2 text-sm font-medium group"
  aria-label={`Switch to ${languages[altLang]}`}
>
  <Icon
    class="w-5 h-5 transition-transform duration-300 group-hover:rotate-12 group-hover:scale-110"
    name="mdi:translate"
  />
  <span
    class="hidden sm:inline transition-transform duration-300 group-hover:translate-x-0.5"
  >
    {altLang.toUpperCase()}
  </span>
</a>

<script>
  function setupLanguageSwitcher() {
    const switcher = document.getElementById("language-switcher");
    if (!switcher) return;

    const handleClick = (e: Event) => {
      e.preventDefault();

      const link = e.currentTarget as HTMLAnchorElement;
      let targetUrl = link.getAttribute("href");
      if (!targetUrl) return;

      // Remove any .html extensions from the URL
      targetUrl = targetUrl.replace(/\.html($|#)/, "$1");

      // Preserve hash fragment
      const currentHash = window.location.hash;
      if (currentHash) {
        targetUrl = targetUrl.split("#")[0] + currentHash;
      }

      // Set manual scroll restoration to prevent browser's native jump
      if ("scrollRestoration" in history) {
        history.scrollRestoration = "manual";
      }

      // Save current scroll position with language-specific key
      sessionStorage.setItem("lang-switch-scroll", window.scrollY.toString());

      // Navigate to new URL
      window.location.href = targetUrl;
    };

    const newSwitcher = switcher.cloneNode(true) as HTMLElement;
    switcher.parentNode?.replaceChild(newSwitcher, switcher);

    const finalSwitcher = document.getElementById("language-switcher");
    if (finalSwitcher) {
      finalSwitcher.addEventListener("click", handleClick);
    }
  }

  setupLanguageSwitcher();
  document.addEventListener("astro:page-load", setupLanguageSwitcher);
</script>
