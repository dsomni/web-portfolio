---
import { Icon } from "astro-icon/components";
---

<theme-toggle>
  <button
    id="theme-toggle"
    class="relative p-2 rounded-lg text-light-text dark:text-dark-text hover:bg-primary-100 dark:hover:bg-primary-900/30 transition-all duration-300 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-primary-500 group overflow-hidden"
    aria-label="Toggle theme"
    type="button"
  >
    <div class="icon-container relative w-5 h-5">
      <Icon
        class="absolute inset-0 w-5 h-5 hidden dark:block transition-transform duration-300 group-hover:rotate-180 group-hover:scale-110"
        name="mdi:white-balance-sunny"
      />
      <Icon
        class="absolute inset-0 w-5 h-5 block dark:hidden transition-transform duration-300 group-hover:-rotate-12 group-hover:scale-110"
        name="mdi:moon-and-stars"
      />
    </div>
  </button>
</theme-toggle>

<script>
  class ThemeToggle extends HTMLElement {
    connectedCallback() {
      const button = this.querySelector("#theme-toggle");
      const iconContainer = button?.querySelector(".icon-container");
      if (!button || !iconContainer) return;

      let isAnimating = false;

      // Handler for toggle click
      const handleToggleClick = () => {
        if (isAnimating) return; // Prevent multiple clicks during animation

        isAnimating = true;
        const element = document.documentElement;

        // Add rotation animation to container
        iconContainer.classList.add("animate-spin-once");

        // Wait for animation to complete before changing theme
        setTimeout(() => {
          element.classList.toggle("dark");
          const isDark = element.classList.contains("dark");
          localStorage.setItem("theme", isDark ? "dark" : "light");

          // Remove animation class
          iconContainer.classList.remove("animate-spin-once");
          isAnimating = false;
        }, 150); // Change theme halfway through animation (300ms / 2)
      };

      // Add click event listener
      button.addEventListener("click", handleToggleClick);
    }
  }

  // Define the custom element
  // Check if it's not already defined to avoid errors on hot reload
  if (!customElements.get("theme-toggle")) {
    customElements.define("theme-toggle", ThemeToggle);
  }
</script>

<style>
  /* Make the web component behave like inline */
  theme-toggle {
    display: contents;
  }

  /* Spin animation on click */
  @keyframes spin-once {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(180deg);
    }
  }

  .animate-spin-once {
    animation: spin-once 0.3s ease-in-out;
  }
</style>
