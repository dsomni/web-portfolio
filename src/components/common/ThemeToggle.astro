<!-- src/components/common/ThemeToggle.astro -->
<theme-toggle>
  <button
    id="theme-toggle"
    class="relative p-2 rounded-lg bg-light-elevated dark:bg-dark-elevated text-light-text dark:text-dark-text hover:bg-primary-100 dark:hover:bg-primary-900/30 transition-all focus:outline-none focus:ring-2 focus:ring-primary-500"
    aria-label="Toggle theme"
    type="button"
  >
    <!-- Sun icon (visible in dark mode) -->
    <svg
      id="sun-icon"
      class="w-5 h-5 hidden dark:block"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
      ></path>
    </svg>

    <!-- Moon icon (visible in light mode) -->
    <svg
      id="moon-icon"
      class="w-5 h-5 block dark:hidden"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
      ></path>
    </svg>
  </button>
</theme-toggle>

<script>
  class ThemeToggle extends HTMLElement {
    connectedCallback() {
      const button = this.querySelector("#theme-toggle");
      if (!button) return;

      // Handler for toggle click
      const handleToggleClick = () => {
        const element = document.documentElement;
        element.classList.toggle("dark");

        const isDark = element.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      };

      // Add click event listener
      button.addEventListener("click", handleToggleClick);
    }
  }

  // Define the custom element
  // Check if it's not already defined to avoid errors on hot reload
  if (!customElements.get("theme-toggle")) {
    customElements.define("theme-toggle", ThemeToggle);
  }
</script>

<style>
  /* Make the web component behave like inline */
  theme-toggle {
    display: contents;
  }
</style>
