---
import {
  useTranslations,
  type Language,
  type Translations,
} from "../../utils/i18n";
import { localizedUrl, url } from "../../utils/url";
import { Icon } from "astro-icon/components";
import { getCollection } from "astro:content";

interface Props {
  lang: Language;
}

const { lang } = Astro.props;
const t = useTranslations(lang);

let social = await getCollection("social");
social = social.sort(
  (a: any, b: any) => (a.data.order ?? 999) - (b.data.order ?? 999)
);

// Define your links once
const quickLinks: { locale_key: keyof Translations; href: string }[] = [
  { locale_key: "nav.home", href: "/" },
  { locale_key: "nav.projects", href: "/#projects" },
  { locale_key: "nav.about", href: "/#about" },
  { locale_key: "nav.contact", href: "/#contact" },
];

const currentYear = new Date().getFullYear();
---

<footer
  class="mt-20 border-t border-light-border dark:border-dark-border bg-light-surface dark:bg-dark-surface"
>
  <div class="container-custom py-12">
    <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
      <div class="space-y-4">
        <div class="flex items-center gap-2">
          <img
            src={url("/images/logo.svg")}
            alt="logo"
            class="w-10 h-10 group-hover:scale-110 transition-transform"
            loading="eager"
          />
          <span class="font-bold text-lg">{t("personal.fullname")}</span>
        </div>
        <p class="text-sm text-light-text-muted dark:text-dark-text-muted">
          {t("personal.specialty")}
        </p>
      </div>

      <!-- Quick Links -->
      <div class="space-y-4">
        <h3
          class="font-semibold text-sm uppercase tracking-wider text-light-text dark:text-dark-text"
        >
          {t("footer.quickLinks")}
        </h3>
        <ul class="space-y-2">
          {
            quickLinks.map((link) => (
              <li>
                <a
                  href={localizedUrl(lang, link.href)}
                  class="text-sm text-light-text-muted dark:text-dark-text-muted hover:text-primary-600 dark:hover:text-primary-400 transition-colors"
                >
                  {t(link.locale_key)}
                </a>
              </li>
            ))
          }
        </ul>
      </div>

      <div class="space-y-4">
        <h3
          class="font-semibold text-sm uppercase tracking-wider text-light-text dark:text-dark-text"
        >
          {t("footer.connect")}
        </h3>
        <div class="flex gap-4">
          {
            social.map(({ data }: { data: any }) =>
              data.copy_content ? (
                <button
                  type="button"
                  data-copy={data.url}
                  data-label={data.name}
                  class="w-10 h-10 rounded-full bg-light-elevated dark:bg-dark-elevated flex items-center justify-center text-light-text dark:text-dark-text hover:bg-primary-600 hover:text-white dark:hover:bg-primary-500 transition-all hover:scale-110"
                  aria-label={`Copy ${data.name}`}
                >
                  <Icon name={data.icon} size="20" />
                </button>
              ) : (
                <a
                  href={data.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="w-10 h-10 rounded-full bg-light-elevated dark:bg-dark-elevated flex items-center justify-center text-light-text dark:text-dark-text hover:bg-primary-600 hover:text-white dark:hover:bg-primary-500 transition-all hover:scale-110"
                  aria-label={data.name}
                >
                  <Icon name={data.icon} size="20" />
                </a>
              )
            )
          }
        </div>
      </div>
    </div>

    <div
      class="mt-8 pt-8 border-t border-light-border dark:border-dark-border flex flex-col md:flex-row justify-between items-center gap-4"
    >
      <p class="text-sm text-light-text-muted dark:text-dark-text-muted">
        Â© {currentYear}
        {t("personal.fullname")}. {t("footer.rights")}.
      </p>
    </div>
  </div>
</footer>

<script>
  function setupSocialCopy() {
    // Idempotent init
    if (document.documentElement.dataset.copyInit === "1") return;

    // Create a simple toast container once
    let toast = document.getElementById("copy-toast");
    if (!toast) {
      toast = document.createElement("div");
      toast.id = "copy-toast";
      toast.setAttribute("role", "status"); // announce changes
      toast.setAttribute("aria-live", "polite"); // non-intrusive
      toast.className =
        "fixed bottom-12 left-1/2 -translate-x-1/2 px-4 py-3 rounded-2xl bg-green-600 text-white text-base shadow-lg transition-opacity duration-300 opacity-0 pointer-events-none";
      document.body.appendChild(toast);
    }

    const showToast = (msg) => {
      toast.textContent = msg;
      toast.classList.remove("opacity-0");
      clearTimeout(showToast._t);
      showToast._t = setTimeout(() => toast.classList.add("opacity-0"), 1600);
    };

    // Bind copy handlers to any element with data-copy
    document.querySelectorAll("[data-copy]").forEach((el) => {
      if (el.dataset.copyBound === "1") return;
      el.addEventListener(
        "click",
        async (e) => {
          e.preventDefault();
          e.stopPropagation();
          const value = el.getAttribute("data-copy") || "";
          const label = el.getAttribute("data-label") || "Link";
          try {
            await navigator.clipboard.writeText(value);
            showToast(`${label} copied to clipboard!`);
          } catch (err) {
            // Fallback message if permissions/blockers prevent copy
            showToast("Copy failed");
          }
        },
        { passive: false }
      );
      el.dataset.copyBound = "1";
    });

    document.documentElement.dataset.copyInit = "1";
  }

  // Run on initial load
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", setupSocialCopy, {
      once: true,
    });
  } else {
    setupSocialCopy();
  }

  // Re-run after Astro client navigations
  document.addEventListener("astro:page-load", () => {
    // reset guard so new DOM gets bound
    document.documentElement.dataset.copyInit = "0";
    setupSocialCopy();
  });
</script>
