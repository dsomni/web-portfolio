---
import {
  getLangFromUrl,
  useTranslations,
  getLocalizedPath,
} from "../../utils/i18n";
import ThemeToggle from "./ThemeToggle.astro";
import LanguageSwitcher from "./LanguageSwitcher.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const navItems = [
  { href: getLocalizedPath("/", lang), label: t("nav.home") },
  { href: getLocalizedPath("/projects", lang), label: t("nav.projects") },
  { href: getLocalizedPath("/#about", lang), label: t("nav.about") },
  { href: getLocalizedPath("/#contact", lang), label: t("nav.contact") },
];
---

<header
  class="sticky top-0 z-50 w-full glass border-b border-light-border/50 dark:border-dark-border/50"
>
  <nav class="container-custom py-4">
    <div class="flex items-center justify-between">
      <!-- Logo -->
      <a
        href={getLocalizedPath("/", lang)}
        class="text-xl font-bold text-light-text dark:text-dark-text hover:text-primary-600 dark:hover:text-primary-400 transition-colors group"
      >
        <span class="inline-flex items-center gap-2">
          <span
            class="w-10 h-10 rounded-lg bg-gradient-to-br from-primary-600 to-accent-600 flex items-center justify-center text-white font-bold text-lg group-hover:scale-110 transition-transform"
          >
            DB
          </span>
          <span class="hidden sm:inline">Dmitry Beresnev</span>
        </span>
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center gap-8">
        <ul class="flex items-center gap-6">
          {
            navItems.map((item) => (
              <li>
                <a
                  href={item.href}
                  class="text-sm font-medium text-light-text-muted dark:text-dark-text-muted hover:text-primary-600 dark:hover:text-primary-400 transition-colors relative group"
                >
                  {item.label}
                  <span class="absolute -bottom-1 left-0 w-0 h-0.5 bg-primary-600 transition-all group-hover:w-full" />
                </a>
              </li>
            ))
          }
        </ul>

        <!-- Theme & Language -->
        <div class="flex items-center gap-3">
          <ThemeToggle />
          <LanguageSwitcher lang={lang} />
        </div>
      </div>

      <!-- Mobile Menu Button -->
      <div class="flex md:hidden items-center gap-3">
        <ThemeToggle />
        <LanguageSwitcher lang={lang} />
        <button
          id="mobile-menu-button"
          class="p-2 text-light-text dark:text-dark-text hover:text-primary-600 dark:hover:text-primary-400 transition-colors"
          aria-label="Toggle menu"
        >
          <svg
            class="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Menu -->
    <div
      id="mobile-menu"
      class="hidden md:hidden mt-4 pt-4 border-t border-light-border dark:border-dark-border"
    >
      <ul class="flex flex-col gap-4">
        {
          navItems.map((item) => (
            <li>
              <a
                href={item.href}
                class="block text-sm font-medium text-light-text-muted dark:text-dark-text-muted hover:text-primary-600 dark:hover:text-primary-400 transition-colors py-2"
              >
                {item.label}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </nav>
</header>

<script>
  // Mobile menu toggle
  const menuButton = document.getElementById("mobile-menu-button");
  const mobileMenu = document.getElementById("mobile-menu");

  if (menuButton && mobileMenu) {
    menuButton.addEventListener("click", () => {
      mobileMenu.classList.toggle("hidden");
    });

    // Close menu when clicking outside
    document.addEventListener("click", (e) => {
      if (
        !menuButton.contains(e.target as Node) &&
        !mobileMenu.contains(e.target as Node)
      ) {
        mobileMenu.classList.add("hidden");
      }
    });

    // Close menu when clicking a link
    mobileMenu.querySelectorAll("a").forEach((link) => {
      link.addEventListener("click", () => {
        mobileMenu.classList.add("hidden");
      });
    });
  }
</script>
