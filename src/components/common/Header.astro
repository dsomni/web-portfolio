---
import { getRelativeLocaleUrl } from "astro:i18n";
import { useTranslations, type Language } from "../../utils/i18n";
import { localizedUrl, url } from "../../utils/url";
import ThemeToggle from "./ThemeToggle.astro";
import LanguageSwitcher from "./LanguageSwitcher.astro";
import { Icon } from "astro-icon/components";

const lang = (Astro.currentLocale || "en") as Language;
const t = useTranslations(lang);

const navItems = [
  { href: localizedUrl(lang, "/"), label: t("nav.home") },
  { href: localizedUrl(lang, "/#about"), label: t("nav.about") },
  { href: localizedUrl(lang, "/#projects"), label: t("nav.projects") },
  { href: localizedUrl(lang, "/#contact"), label: t("nav.contact") },
];
---

<header
  class="sticky top-0 z-50 w-full glass border-b border-light-border/50 dark:border-dark-border/50"
>
  <nav class="container-custom py-4">
    <div class="flex items-center justify-between">
      <a
        href={localizedUrl(lang, "/")}
        class="text-xl font-bold text-light-text dark:text-dark-text hover:text-primary-600 dark:hover:text-primary-400 transition-colors group"
      >
        <span class="inline-flex items-center gap-2">
          <img
            src={url("/images/logo.svg")}
            alt="logo"
            class="w-10 h-10 group-hover:scale-110 transition-transform"
            loading="eager"
          />
          <span class="hidden sm:inline">Dmitry Beresnev</span>
        </span>
      </a>

      <div class="hidden md:flex items-center gap-8">
        <ul class="flex items-center gap-6">
          {
            navItems.map((item) => (
              <li>
                <a
                  href={item.href}
                  class="text-sm font-medium text-light-text-muted dark:text-dark-text-muted hover:text-primary-600 dark:hover:text-primary-400 transition-colors relative group"
                >
                  {item.label}
                  <span class="absolute -bottom-1 left-0 w-0 h-0.5 bg-primary-600 transition-all group-hover:w-full" />
                </a>
              </li>
            ))
          }
        </ul>

        <div class="flex items-center gap-3">
          <ThemeToggle />
          <LanguageSwitcher />
        </div>
      </div>

      <div class="flex md:hidden items-center gap-3">
        <ThemeToggle />
        <LanguageSwitcher />
        <button
          id="mobile-menu-button"
          type="button"
          aria-expanded="false"
          class="p-2 text-light-text dark:text-dark-text hover:text-primary-600 dark:hover:text-primary-400 transition-colors"
          aria-label="Toggle menu"
        >
          <Icon class="w-6 h-6" name="mdi:menu" />
        </button>
      </div>
    </div>

    <div
      id="mobile-menu"
      class="hidden md:hidden mt-4 pt-4 border-t border-light-border dark:border-dark-border"
    >
      <ul class="flex flex-col gap-4">
        {
          navItems.map((item) => (
            <li>
              <a
                href={item.href}
                class="block text-sm font-medium text-light-text-muted dark:text-dark-text-muted hover:text-primary-600 dark:hover:text-primary-400 transition-colors py-2"
              >
                {item.label}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </nav>
</header>

<script>
  function setupMobileMenu() {
    const btn = document.getElementById("mobile-menu-button");
    const menu = document.getElementById("mobile-menu");
    if (!btn || !menu || menu.dataset.inited === "1") return;

    const open = () => {
      menu.classList.remove("hidden");
      btn.setAttribute("aria-expanded", "true");
    };
    const close = () => {
      menu.classList.add("hidden");
      btn.setAttribute("aria-expanded", "false");
    };
    const toggle = (e: any) => {
      e.stopPropagation();
      if (menu.classList.contains("hidden")) open();
      else close();
    };
    const outside = (e: any) => {
      if (!btn.contains(e.target) && !menu.contains(e.target)) close();
    };

    btn.addEventListener("click", toggle, { passive: true });
    document.addEventListener("click", outside);
    menu.addEventListener("click", (e) => e.stopPropagation());
    menu.dataset.inited = "1";
  }

  // Run once on initial load (module scripts are deferred)
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", setupMobileMenu);
  } else {
    setupMobileMenu();
  }

  // Re-run after Astro soft navigation (View Transitions / Client Router)
  document.addEventListener("astro:page-load", setupMobileMenu);
</script>
