---
import { getRelativeLocaleUrl } from "astro:i18n";
import { useTranslations, type Language } from "../../utils/i18n";
import { localizedUrl, url } from "../../utils/url";
import ThemeToggle from "./ThemeToggle.astro";
import LanguageSwitcher from "./LanguageSwitcher.astro";
import { Icon } from "astro-icon/components";

const lang = (Astro.currentLocale || "en") as Language;
const t = useTranslations(lang);

const navItems = [
  { href: localizedUrl(lang, "/"), label: t("nav.home") },
  { href: localizedUrl(lang, "/#about"), label: t("nav.about") },
  { href: localizedUrl(lang, "/#projects"), label: t("nav.projects") },
  { href: localizedUrl(lang, "/#contact"), label: t("nav.contact") },
];
---

<header
  class="sticky top-0 z-50 w-full glass border-b border-light-border/50 dark:border-dark-border/50"
>
  <nav class="w-full px-2 sm:px-4 lg:px-8 py-2.5 md:py-4">
    <div
      class="max-w-7xl mx-auto flex items-center justify-between gap-2 min-w-0"
    >
      <!-- Logo -->
      <a
        href={localizedUrl(lang, "/")}
        class="flex-shrink-0 text-xl font-bold text-light-text dark:text-dark-text hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-300 group"
      >
        <span class="inline-flex items-center gap-1.5">
          <img
            src={url("/images/logo.svg")}
            alt="logo"
            class="w-8 h-8 sm:w-9 sm:h-9 md:w-10 md:h-10 flex-shrink-0 transition-transform duration-300 group-hover:scale-110 group-hover:rotate-6"
            loading="eager"
          />
          <span class="hidden sm:inline text-sm md:text-base lg:text-xl"
            >Dmitry Beresnev</span
          >
        </span>
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center gap-6 lg:gap-8 flex-shrink-0">
        <ul class="flex items-center gap-4 lg:gap-6">
          {
            navItems.map((item) => (
              <li>
                <a
                  href={item.href}
                  class="text-sm font-medium text-light-text-muted dark:text-dark-text-muted hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-300 relative group py-1 whitespace-nowrap"
                >
                  {item.label}
                  <span class="absolute -bottom-1 left-0 w-0 h-0.5 bg-primary-600 dark:bg-primary-400 transition-all duration-300 group-hover:w-full" />
                </a>
              </li>
            ))
          }
        </ul>

        <div class="flex items-center gap-2 lg:gap-3">
          <ThemeToggle />
          <LanguageSwitcher />
        </div>
      </div>

      <!-- Mobile Controls -->
      <div class="flex md:hidden items-center gap-1 flex-shrink-0">
        <div class="scale-90">
          <ThemeToggle />
        </div>
        <div class="scale-90">
          <LanguageSwitcher />
        </div>
        <button
          id="mobile-menu-button"
          type="button"
          aria-expanded="false"
          class="p-1 text-light-text dark:text-dark-text hover:text-primary-600 dark:hover:text-primary-400 transition-all duration-300 flex-shrink-0"
          aria-label="Toggle menu"
        >
          <Icon
            class="w-6 h-6 transition-transform duration-300"
            name="mdi:menu"
            id="menu-icon"
          />
        </button>
      </div>
    </div>

    <!-- Mobile Menu -->
    <div
      id="mobile-menu"
      class="hidden md:hidden mt-3 pt-3 border-t border-light-border dark:border-dark-border animate-fade-in"
    >
      <ul class="flex flex-col gap-1.5">
        {
          navItems.map((item) => (
            <li>
              <a
                href={item.href}
                class="block text-sm font-medium text-light-text-muted dark:text-dark-text-muted hover:text-primary-600 dark:hover:text-primary-400 hover:bg-light-elevated dark:hover:bg-dark-elevated transition-all duration-300 py-2.5 px-3 rounded-lg group"
              >
                <span class="inline-flex items-center gap-2">
                  <span class="opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                    <Icon name="mdi:chevron-right" class="w-4 h-4" />
                  </span>
                  <span class="group-hover:translate-x-1 transition-transform duration-300">
                    {item.label}
                  </span>
                </span>
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </nav>
</header>

<script>
  function setupMobileMenu() {
    const btn = document.getElementById("mobile-menu-button");
    const menu = document.getElementById("mobile-menu");
    const icon = document.getElementById("menu-icon");

    if (!btn || !menu || menu.dataset.inited === "1") return;

    const open = () => {
      menu.classList.remove("hidden");
      btn.setAttribute("aria-expanded", "true");
      if (icon) icon.setAttribute("name", "mdi:close");
    };

    const close = () => {
      menu.classList.add("hidden");
      btn.setAttribute("aria-expanded", "false");
      if (icon) icon.setAttribute("name", "mdi:menu");
    };

    const toggle = (e: Event) => {
      e.stopPropagation();
      if (menu.classList.contains("hidden")) open();
      else close();
    };

    const outside = (e: Event) => {
      if (!btn.contains(e.target as Node) && !menu.contains(e.target as Node)) {
        close();
      }
    };

    btn.addEventListener("click", toggle);
    document.addEventListener("click", outside);
    menu.addEventListener("click", (e) => e.stopPropagation());

    // Close menu when clicking on a link
    menu.querySelectorAll("a").forEach((link) => {
      link.addEventListener("click", close);
    });

    menu.dataset.inited = "1";
  }

  // Run once on initial load
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", setupMobileMenu);
  } else {
    setupMobileMenu();
  }

  // Re-run after Astro view transitions
  document.addEventListener("astro:page-load", setupMobileMenu);
</script>
